//
//
//

const uuid = require('core/uuid/create');
const db = require('db');
const _ = require('lodash');

function add_gamer(game_uuid, gamer_uuid, cb) {

  cb = cb || function() {};

  // TODO check that user can only play a game at a time

  if (!game_uuid || !gamer_uuid) {
    return cb({
      status: 400,
      err: new Error('low args')
    });
  }

  let query = {
    uuid: game_uuid,
    $or: [{
      disable: false
    }, {
      disable: {
        $exists: false
      }
    }]
  }

  db.games.findOne(query, {
    fighters: true,
    finished: true
  }).lean().exec(function(err, game) {

    if (err) {

      return cb({
        status: 500,
        err: err
      });
    }

    // 404
    if (!game) {
      return cb({
        status: 404,
        err: new Error('No game found with this UUID, or finished.')
      });
    }

    if (game.finished) {
      return cb({
        status: 403,
        err: new Error('This game finished!')
      });
    }

    // if game is full
    // FIXME count of fighters should come from game, not static
    if (!game || !game.fighters || game.fighters.length >= 3) {

      // if he is an old member
      if (_.includes(game.fighters, gamer_uuid)) {
        return cb(null, {
          exists: true
        });
      }


      return cb({
        status: 400,
        err: new Error('This game is full of gamer!')
      });
    }

    add_user_to_db(game_uuid, gamer_uuid, game.fighters.length, cb);
  })
}

module.exports = add_gamer;

//////////

function add_user_to_db(game_uuid, gamer_uuid, old_users_n, cb) {

  cb = cb || function() {};

  db.games.update({
    uuid: game_uuid
  }, {
    $addToSet: {
      fighters: gamer_uuid
    }
  }, function(err, result) {

    if (err) {
      return cb({
        status: 500,
        err: err
      })
    }

    if (result && result.ok && result.n == 1 && result.nModified == 1) {

      return cb(null, {
        add: true,
        users_n: old_users_n + 1
      });

    } else if (result && result.ok && result.n == 1) {

      return cb(null, {
        exists: true,
        users_n: old_users_n
      });
    }

    return cb({
      status: 500,
      err: new Error('unhandle result happend!')
    });
  })
}
